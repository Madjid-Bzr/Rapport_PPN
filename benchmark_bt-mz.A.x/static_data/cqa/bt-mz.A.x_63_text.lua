_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 380 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 115\nnb uops            : 115\nloop length        : 674\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 19\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 28.75 cycles\nfront end            : 28.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5    | P6    | P7\n--------------------------------------------------------------------\nuops   | 11.50 | 34.00 | 25.00 | 25.00 | 0.00 | 21.00 | 11.50 | 0.00\ncycles | 11.50 | 34.00 | 25.00 | 25.00 | 0.00 | 21.00 | 11.50 | 0.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 28.75\nDispatch  : 34.00\nOverall L1: 34.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 25%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 34.00 cycles. At this rate:\n - 17% of peak load performance is reached (11.18 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: bc07\n\nInstruction                              | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | Latency | Recip. throughput\n----------------------------------------------------------------------------------------------------------------------------------\nMOV 0x50(%RSP),%R14                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA -0x2(%RBX),%ESI                      | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x48(%RSP),%R9                       | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EBX,%R8                          | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSXD %ESI,%RSI                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSXD 0x170(%RSP),%RAX                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd8(%RSP),%R8                      | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nIMUL %R14,%RSI                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x140(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL %RAX,%R9                            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%R9                       | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nMOVSD 0x15a89(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd0(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%RAX                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%R14,%RSI,1),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RSI,1),%RSI                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RAX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSD 0x15a6c(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA (%R14,%RCX,1),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RCX,1),%RCX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDX,1),%R10                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RDX,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RSI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RCX,8),%RSI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%R10,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %R14,%R10                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x30(%R11,%R8,8),%RAX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%R8                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%R9,%R10,1),%R9                  | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%R9,8),%R9                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%R8,8),%R8                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPL (%RAX)                              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nMOV 0xb8(%RSP),%EAX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EBX,%RAX                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOV 0x50(%RSP),%RBX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD 0x170(%RSP),%RSI                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA -0x2(%RAX),%EDX                      | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x48(%RSP),%RDI                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x140(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EDX,%RDX                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL 0xd8(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nIMUL %RBX,%RDX                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOVSD 0x14822(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nMOVSD 0x14812(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL %RSI,%RDI                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%RDI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nIMUL 0xd0(%RSP),%RSI                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%RSI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%RBX,%RDX,1),%R8                    | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%RDI,%RDX,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RAX,%RSI                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA (%R14,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%RDI,%R8,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RBX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x30(%R11,%RSI,8),%RAX               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%RSI                     | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RDI,%R8,1),%RDI                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%R14,%RDI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%RSI,8),%RSI               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\nMOV 0x128(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x50(%RSP),%RDI                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x140(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA 0x6(%RDI,%RBX,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x1f0(%RSP),%RDI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x120(%RSP),%RSI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA (%R14,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nADD 0xd8(%RSP),%RSI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RBX,%RDI,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x1f8(%RSP),%RDI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA 0x30(%R11,%RSI,8),%RAX               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%RSI                     | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%R14,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%RSI,8),%RSI               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x6(%RBX,%RDI,1),%RDI                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\nMOVSXD 0x170(%RSP),%R8                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nMOV 0x48(%RSP),%RDX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x210(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x218(%RSP),%RSI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL %R8,%RDX                            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%RDX                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nMOVSXD 0xb8(%RSP),%RAX                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA 0x6(%RDX,%RBX,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x140(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x228(%RSP),%R15                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSD 0x13f24(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd8(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RCX,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOVSD 0x13f17(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd0(%RSP),%R8                      | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x6(%RDX,%RSI,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%R8                       | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%RBX,%RCX,8),%RSI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x220(%RSP),%RCX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nADD %RAX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x6(%RDX,%RCX,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x30(%R14,%R8,8),%RAX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%R8                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RDX,%R15,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RCX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R14,%R8,8),%R8                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this loop\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 34.00 to 7.50 cycles (4.53x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nFortran storage order is column-major: do i do j a(i,j) = b(i,j) (slow, non stride 1) => do i do j a(j,i) = b(i,j) (fast, stride 1)\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is not vectorized.\n4 data elements could be processed at once in vector registers.\nBy vectorizing your loop, you can lower the cost of an iteration from 34.00 to 8.50 cycles (4.00x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  },
  AVG = {
      hint = {
        {
          title = "Type of elements and instruction set",
          txt = "No instructions are processing arithmetic or math operations on FP elements. This loop is probably writing/copying data or processing integer elements.",
        },
        {
          title = "Matching between your loop (in the source code) and the binary loop",
          txt = "The binary loop does not contain any FP arithmetical operations.\nThe binary loop is loading 380 bytes.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 115\nnb uops            : 115\nloop length        : 674\nused x86 registers : 13\nused mmx registers : 0\nused xmm registers : 2\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 19\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 28.75 cycles\nfront end            : 28.75 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5    | P6    | P7\n--------------------------------------------------------------------\nuops   | 11.50 | 34.00 | 25.00 | 25.00 | 0.00 | 21.00 | 11.50 | 0.00\ncycles | 11.50 | 34.00 | 25.00 | 25.00 | 0.00 | 21.00 | 11.50 | 0.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 28.75\nDispatch  : 34.00\nOverall L1: 34.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 0%\nload    : 0%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 25%\nload    : 25%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 34.00 cycles. At this rate:\n - 17% of peak load performance is reached (11.18 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the loop is: bc07\n\nInstruction                              | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | Latency | Recip. throughput\n----------------------------------------------------------------------------------------------------------------------------------\nMOV 0x50(%RSP),%R14                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA -0x2(%RBX),%ESI                      | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x48(%RSP),%R9                       | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EBX,%R8                          | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSXD %ESI,%RSI                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSXD 0x170(%RSP),%RAX                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd8(%RSP),%R8                      | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nIMUL %R14,%RSI                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x140(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL %RAX,%R9                            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%R9                       | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nMOVSD 0x15a89(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd0(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%RAX                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%R14,%RSI,1),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RSI,1),%RSI                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RAX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOVSD 0x15a6c(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA (%R14,%RCX,1),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RCX,1),%RCX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDX,1),%R10                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%RDX,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RSI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RCX,8),%RSI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%R9,%R10,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %R14,%R10                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x30(%R11,%R8,8),%RAX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%R8                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%R9,%R10,1),%R9                  | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%R9,8),%R9                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%R8,8),%R8                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPL (%RAX)                              | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nMOV 0xb8(%RSP),%EAX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EBX,%RAX                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOV 0x50(%RSP),%RBX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD 0x170(%RSP),%RSI                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA -0x2(%RAX),%EDX                      | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x48(%RSP),%RDI                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x140(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSXD %EDX,%RDX                         | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL 0xd8(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nIMUL %RBX,%RDX                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOVSD 0x14822(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nMOVSD 0x14812(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL %RSI,%RDI                           | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%RDI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nIMUL 0xd0(%RSP),%RSI                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%RSI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%RBX,%RDX,1),%R8                    | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%RDI,%RDX,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RAX,%RSI                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA (%R14,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x6(%RDI,%R8,1),%RDX                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD %RBX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x30(%R11,%RSI,8),%RAX               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%RSI                     | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RDI,%R8,1),%RDI                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%R14,%RDI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%RSI,8),%RSI               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\nMOV 0x128(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x50(%RSP),%RDI                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x140(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R11                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA 0x6(%RDI,%RBX,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x1f0(%RSP),%RDI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x120(%RSP),%RSI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA (%R14,%RDX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nADD 0xd8(%RSP),%RSI                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RBX,%RDI,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x1f8(%RSP),%RDI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nLEA 0x30(%R11,%RSI,8),%RAX               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%RSI                     | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%R14,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R11,%RSI,8),%RSI               | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x6(%RBX,%RDI,1),%RDI                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%R14,%RDI,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\nMOVSXD 0x170(%RSP),%R8                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nMOV 0x48(%RSP),%RDX                      | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x210(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x218(%RSP),%RSI                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nIMUL %R8,%RDX                            | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc0(%RSP),%RDX                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nMOVSXD 0xb8(%RSP),%RAX                   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nLEA 0x6(%RDX,%RBX,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nMOV 0x140(%RSP),%RBX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x138(%RSP),%R14                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOV 0x228(%RSP),%R15                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nMOVSD 0x13f24(%RIP),%XMM0                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd8(%RSP),%RAX                     | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RCX,8),%RDI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOVSD 0x13f17(%RIP),%XMM6                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0       | 0.50\nIMUL 0xd0(%RSP),%R8                      | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x6(%RDX,%RSI,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0xc8(%RSP),%R8                       | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA (%RBX,%RCX,8),%RSI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nMOV 0x220(%RSP),%RCX                     | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50\nADD %RAX,%R8                             | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25\nLEA 0x6(%RDX,%RCX,1),%RCX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA 0x30(%R14,%R8,8),%RAX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nADD 0x1e8(%RSP),%R8                      | 1     | 0.25 | 0.25 | 0.50 | 0.50 | 0  | 0.25 | 0.25 | 0  | 1       | 0.50\nLEA 0x6(%RDX,%R15,1),%RDX                | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nLEA (%RBX,%RCX,8),%RCX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA (%RBX,%RDX,8),%RDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50\nLEA 0x58(%R14,%R8,8),%R8                 | 1     | 0    | 1    | 0    | 0    | 0  | 0    | 0    | 0  | 3       | 1\nNOPW (%RAX,%RAX,1)                       | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25\nJMP bc07 <compute_rhs_._omp_fn.0+0x1da7> | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 1    | 0  | 0       | 1-2\n",
        },
      },
      header = {
        "0% of peak computational performance is used (0.00 out of 4.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n - To reference allocatable arrays, use \"allocatable\" instead of \"pointer\" pointers or qualify them with the \"contiguous\" attribute (Fortran 2008)\n - For structures, limit to one indirection. For example, use a_b%c instead of a%b%c with a_b set to a%b before this loop\n",
          title = "Code clean check",
          txt = "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 34.00 to 7.50 cycles (4.53x speedup).",
        },
        {
          workaround = " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nFortran storage order is column-major: do i do j a(i,j) = b(i,j) (slow, non stride 1) => do i do j a(j,i) = b(i,j) (fast, stride 1)\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "All SSE/AVX instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
          title = "Vectorization",
          txt = "Your loop is not vectorized.\n4 data elements could be processed at once in vector registers.\nBy vectorizing your loop, you can lower the cost of an iteration from 34.00 to 8.50 cycles (4.00x speedup).",
        },
        {
          title = "Execution units bottlenecks",
          txt = "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
        },
      },
      potential = {
      },
    },
  common = {
    header = {
      "The loop is defined in /home/madjid/Bureau/CHPS/Maqao/NPB3.4.1-MZ/NPB3.4-MZ-OMP/BT-MZ/rhs.f90:185-192,199,208,215,229,235-277,404.\n",
      "Warnings:\n - Non-innermost loop: analyzing only self part (ignoring child loops).\n - Ignoring paths for analysis\n - Failed to get the number of paths\n - RecMII not computed since number of paths is unknown or > max_paths\n - Streams not analyzed since number of paths is unknown or > max_paths\n",
    },
  },
}
