_cqa_text_report = {
  paths = {
    {
      hint = {
        {
          workaround = " - Recompile with march=broadwell.\nCQA target is Core_M5x (Intel Core M-5xxx Processor, 5th generation Intel Core processors based on Broadwell microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) The GNU Fortran compiler does not support allocation alignment and does not feature directives to benefit from aligned data.\n  2) Use another compiler or locally use C code (for instance via libraries)\n",
          details = " - MOVUPD: 26 occurrences\n - MOVUPS: 2 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 28 suboptimal vector unaligned load/store instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "24 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n48 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 120 FP arithmetical operations:\n - 60: addition or subtraction\n - 60: multiply\nThe binary function is loading 544 bytes (68 double precision FP elements).\nThe binary function is storing 40 bytes (5 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.21 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 114\nnb uops            : 114\nloop length        : 621\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 14\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 1.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 28.50 cycles\nfront end            : 28.50 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5   | P6   | P7\n------------------------------------------------------------------\nuops   | 36.00 | 36.00 | 21.00 | 21.00 | 3.00 | 3.00 | 1.00 | 4.00\ncycles | 36.00 | 36.00 | 21.00 | 21.00 | 3.00 | 3.00 | 1.00 | 4.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 28.50\nDispatch  : 36.00\nOverall L1: 36.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 69%\nload    : 61%\nstore   : 66%\nmul     : 66%\nadd-sub : 66%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 42%\nload    : 40%\nstore   : 41%\nmul     : 41%\nadd-sub : 41%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 37%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 36.00 cycles. At this rate:\n - 23% of peak load performance is reached (15.11 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (1.11 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 5ac0\n\nInstruction                 | Nb FU | P0   | P1   | P2   | P3   | P4 | P5 | P6 | P7   | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------\nMOVSD (%RDI),%XMM4          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVUPD 0x20084(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x20004(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVSD (%RSI),%XMM3          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVAPD %XMM4,%XMM7          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVSD (%RDX),%XMM2          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVUPD 0x20017(%RIP),%XMM8  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM7,%XMM7        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVAPD %XMM3,%XMM6          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVUPD 0x1ff8e(%RIP),%XMM9  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff0d(%RIP),%XMM10 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM6,%XMM6        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVAPD %XMM2,%XMM5          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVUPD 0x20010(%RIP),%XMM11 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff8f(%RIP),%XMM12 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM5,%XMM5        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVUPD 0x1ff0a(%RIP),%XMM13 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ff26(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe9e(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe66(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x2000e(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM8,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM9,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM10,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x2000b(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM11,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM12,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM13,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ffa0(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPS %XMM1,(%RCX)         | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nMOVUPD 0x1ff19(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe95(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe0d(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ff8d(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1fdc5(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fef9(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe75(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fded(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM1,%XMM6           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff69(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fee1(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe5d(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fdd5(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM1,%XMM5           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM5,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPS %XMM0,0x10(%RCX)     | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nMOVSD 0x1fee1(%RIP),%XMM0   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe5d(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdd9(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd55(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM0,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVSD 0x1fed9(%RIP),%XMM0   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nADDSD 0x1fd19(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe4d(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdc9(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd45(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM0,%XMM3           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD %XMM4,%XMM3           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVSD 0x1fec5(%RIP),%XMM4   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe41(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdbd(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd39(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM2           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD %XMM3,%XMM2           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVSD %XMM2,0x20(%RCX)      | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nRET                         | 1     | 0    | 0    | 0.33 | 0.33 | 0  | 0  | 1  | 0.33 | 0       | 1\n",
        },
      },
      header = {
        "20% of peak computational performance is used (3.33 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "69% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 61% of SSE/AVX loads are used in vector version.\n - 66% of SSE/AVX stores are used in vector version.\n - 66% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 66% of SSE/AVX multiply instructions are used in vector version.\n - 50% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is partially vectorized.\nOnly 42% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 36.00 to 15.00 cycles (2.40x speedup).",
        },
        {
          workaround = " - Reduce the number of FP add instructions\n - Reduce the number of FP multiply/FMA instructions\n",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by:\n - execution of FP add operations (the FP add unit is a bottleneck)\n - execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck)\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 36.00 to 28.50 cycles (1.26x speedup).\n",
        },
      },
      potential = {
        {
          workaround = " - Recompile with march=broadwell.\nCQA target is Core_M5x (Intel Core M-5xxx Processor, 5th generation Intel Core processors based on Broadwell microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  },
  AVG = {
      hint = {
        {
          workaround = " - Recompile with march=broadwell.\nCQA target is Core_M5x (Intel Core M-5xxx Processor, 5th generation Intel Core processors based on Broadwell microarchitecture) but specialization flags are -march=x86-64\n - Use vector aligned instructions:\n  1) The GNU Fortran compiler does not support allocation alignment and does not feature directives to benefit from aligned data.\n  2) Use another compiler or locally use C code (for instance via libraries)\n",
          details = " - MOVUPD: 26 occurrences\n - MOVUPS: 2 occurrences\n",
          title = "Vector unaligned load/store instructions",
          txt = "Detected 28 suboptimal vector unaligned load/store instructions.\n",
        },
        {
          title = "Type of elements and instruction set",
          txt = "24 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in scalar mode (one at a time).\n48 SSE or AVX instructions are processing arithmetic or math operations on double precision FP elements in vector mode (two at a time).\n",
        },
        {
          title = "Matching between your function (in the source code) and the binary function",
          txt = "The binary function is composed of 120 FP arithmetical operations:\n - 60: addition or subtraction\n - 60: multiply\nThe binary function is loading 544 bytes (68 double precision FP elements).\nThe binary function is storing 40 bytes (5 double precision FP elements).",
        },
        {
          title = "Arithmetic intensity",
          txt = "Arithmetic intensity is 0.21 FP operations per loaded or stored byte.",
        },
      },
      expert = {
        {
          title = "General properties",
          txt = "nb instructions    : 114\nnb uops            : 114\nloop length        : 621\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 14\nused ymm registers : 0\nused zmm registers : 0\nnb stack references: 0\nADD-SUB / MUL ratio: 1.00\n",
        },
        {
          title = "Front-end",
          txt = "MACRO FUSION NOT POSSIBLE\nFIT IN UOP CACHE\nmicro-operation queue: 28.50 cycles\nfront end            : 28.50 cycles\n",
        },
        {
          title = "Back-end",
          txt = "       | P0    | P1    | P2    | P3    | P4   | P5   | P6   | P7\n------------------------------------------------------------------\nuops   | 36.00 | 36.00 | 21.00 | 21.00 | 3.00 | 3.00 | 1.00 | 4.00\ncycles | 36.00 | 36.00 | 21.00 | 21.00 | 3.00 | 3.00 | 1.00 | 4.00\n\nCycles executing div or sqrt instructions: NA\n",
        },
        {
          title = "Cycles summary",
          txt = "Front-end : 28.50\nDispatch  : 36.00\nOverall L1: 36.00\n",
        },
        {
          title = "Vectorization ratios",
          txt = "all     : 69%\nload    : 61%\nstore   : 66%\nmul     : 66%\nadd-sub : 66%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\n",
        },
        {
          title = "Vector efficiency ratios",
          txt = "all     : 42%\nload    : 40%\nstore   : 41%\nmul     : 41%\nadd-sub : 41%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 37%\n",
        },
        {
          title = "Cycles and memory resources usage",
          txt = "Assuming all data fit into the L1 cache, each call to the function takes 36.00 cycles. At this rate:\n - 23% of peak load performance is reached (15.11 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 3% of peak store performance is reached (1.11 out of 32.00 bytes stored per cycle (GB/s @ 1GHz))\n",
        },
        {
          title = "Front-end bottlenecks",
          txt = "Found no such bottlenecks.",
        },
        {
          title = "ASM code",
          txt = "In the binary file, the address of the function is: 5ac0\n\nInstruction                 | Nb FU | P0   | P1   | P2   | P3   | P4 | P5 | P6 | P7   | Latency | Recip. throughput\n-------------------------------------------------------------------------------------------------------------------\nMOVSD (%RDI),%XMM4          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVUPD 0x20084(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x20004(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVSD (%RSI),%XMM3          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVAPD %XMM4,%XMM7          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVSD (%RDX),%XMM2          | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMOVUPD 0x20017(%RIP),%XMM8  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM7,%XMM7        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVAPD %XMM3,%XMM6          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVUPD 0x1ff8e(%RIP),%XMM9  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff0d(%RIP),%XMM10 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM6,%XMM6        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVAPD %XMM2,%XMM5          | 1     | 0    | 0    | 0    | 0    | 0  | 0  | 0  | 0    | 0       | 0.25\nMOVUPD 0x20010(%RIP),%XMM11 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff8f(%RIP),%XMM12 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nUNPCKLPD %XMM5,%XMM5        | 1     | 0    | 0    | 0    | 0    | 0  | 1  | 0  | 0    | 1       | 1\nMOVUPD 0x1ff0a(%RIP),%XMM13 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ff26(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe9e(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe66(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x2000e(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM8,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM9,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM10,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM6,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x2000b(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM11,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM12,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM13,%XMM0          | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM5,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM0,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ffa0(%RIP),%XMM0  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPS %XMM1,(%RCX)         | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nMOVUPD 0x1ff19(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe95(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe0d(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM1,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1ff8d(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM7,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1fdc5(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fef9(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe75(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fded(%RIP),%XMM7  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM6,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM7,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM1,%XMM6           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVUPD 0x1ff69(%RIP),%XMM1  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fee1(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fe5d(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPD 0x1fdd5(%RIP),%XMM6  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 0.50\nMULPD %XMM5,%XMM1           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM6,%XMM1           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMULPD %XMM1,%XMM5           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDPD %XMM5,%XMM0           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVUPS %XMM0,0x10(%RCX)     | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nMOVSD 0x1fee1(%RIP),%XMM0   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe5d(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdd9(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd55(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM0,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nMOVSD 0x1fed9(%RIP),%XMM0   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nADDSD 0x1fd19(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe4d(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdc9(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM3,%XMM0           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd45(%RIP),%XMM0   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM0,%XMM3           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD %XMM4,%XMM3           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVSD 0x1fec5(%RIP),%XMM4   | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 0       | 0.50\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fe41(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fdbd(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM2,%XMM4           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD 0x1fd39(%RIP),%XMM4   | 1     | 0    | 1    | 0.50 | 0.50 | 0  | 0  | 0  | 0    | 3       | 1\nMULSD %XMM4,%XMM2           | 1     | 0.50 | 0.50 | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 0.50\nADDSD %XMM3,%XMM2           | 1     | 0    | 1    | 0    | 0    | 0  | 0  | 0  | 0    | 3       | 1\nMOVSD %XMM2,0x20(%RCX)      | 1     | 0    | 0    | 0.33 | 0.33 | 1  | 0  | 0  | 0.33 | 3       | 1\nRET                         | 1     | 0    | 0    | 0.33 | 0.33 | 0  | 0  | 1  | 0.33 | 0       | 1\n",
        },
      },
      header = {
        "20% of peak computational performance is used (3.33 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))",
      },
      brief = {
      },
      gain = {
        {
          workaround = " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\ndo i a(i)%x = b(i)%x (slow, non stride 1) => do i a%x(i) = b%x(i) (fast, stride 1)\n",
          details = "69% of SSE/AVX instructions are used in vector version (process two or more data elements in vector registers):\n - 61% of SSE/AVX loads are used in vector version.\n - 66% of SSE/AVX stores are used in vector version.\n - 66% of SSE/AVX addition or subtraction instructions are used in vector version.\n - 66% of SSE/AVX multiply instructions are used in vector version.\n - 50% of SSE/AVX instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
          title = "Vectorization",
          txt = "Your function is partially vectorized.\nOnly 42% of vector register length is used (average across all SSE/AVX instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 36.00 to 15.00 cycles (2.40x speedup).",
        },
        {
          workaround = " - Reduce the number of FP add instructions\n - Reduce the number of FP multiply/FMA instructions\n",
          title = "Execution units bottlenecks",
          txt = "Performance is limited by:\n - execution of FP add operations (the FP add unit is a bottleneck)\n - execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck)\n\nBy removing all these bottlenecks, you can lower the cost of an iteration from 36.00 to 28.50 cycles (1.26x speedup).\n",
        },
      },
      potential = {
        {
          workaround = " - Recompile with march=broadwell.\nCQA target is Core_M5x (Intel Core M-5xxx Processor, 5th generation Intel Core processors based on Broadwell microarchitecture) but specialization flags are -march=x86-64\n - Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).\n",
          title = "FMA",
          txt = "Presence of both ADD/SUB and MUL operations.",
        },
      },
    },
  common = {
    header = {
      "The function is defined in /home/madjid/Bureau/CHPS/Maqao/NPB3.4.1-MZ/NPB3.4-MZ-OMP/BT-MZ/exact_solution.f90:24-28.\n",
    },
    nb_paths = 1,
  },
}
