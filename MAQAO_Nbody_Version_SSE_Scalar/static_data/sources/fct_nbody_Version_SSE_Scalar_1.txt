/usr/include/x86_64-linux-gnu/bits/stdio2.h: 107 - 107
--------------------------------------------------------------------------------

107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
/home/anism/Bureau/Test Nbody Version Scalaire /nbody_Version_SSE_Scalar.c: 41 - 329
--------------------------------------------------------------------------------

41:   __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d));
42:   
43:   return (d << 32) | a;
[...]
64:   vector c = { 0.0, 0.0 };
65:   __asm__ volatile (
[...]
219:   for (int i = 0; i < nbodies - 1; i++)
220:     for (int j = i + 1; j < nbodies; j++)
221:       if (positions[i].x == positions[j].x &&
222: 	  positions[i].y == positions[j].y)
223: 	{
224: 	  vector temp = velocities[i];
225: 	  velocities[i] = velocities[j];
226: 	  velocities[j] = temp;
[...]
249:   for (int i = 0; i < nbodies; i++)
250:     velocities[i] = add_vectors(velocities[i], accelerations[i]);
[...]
263:   compute_accelerations();
264:   compute_positions();
[...]
271: {
[...]
279:   srand(time(NULL));
280:   
281:   //
282:   SDL_Init(SDL_INIT_VIDEO);
283:   SDL_CreateWindowAndRenderer(800, 800, SDL_WINDOW_OPENGL, &window, &renderer);
284:   
285:   //
286:   init_system();
287:   
288:   //Main loop
289:   for (int i = 0; !quit && i < timeSteps; i++)
290:     {	  
291:       //
292:       double before = (double)rdtsc();
293:       
294:       simulate();
295: 
296:       //
297:       double after = (double)rdtsc();
298:       
299:       //
300:       printf("%d %lf\n", i, (after - before));
301:       
302:       SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
303:       SDL_RenderClear(renderer);
304:       
305:       for (int i = 0; i < nbodies; i++)
306: 	{
307: 	  SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
308: 	  SDL_RenderDrawPoint(renderer, positions[i].x, positions[i].y);
309: 	}
310:       
311:       SDL_RenderPresent(renderer);
312:       
313:       SDL_Delay(10);
314:       
315:       while (SDL_PollEvent(&event))
316: 	if (event.type == SDL_QUIT)
317: 	  quit = 1;
318: 	else
319: 	  if (event.type == SDL_KEYDOWN)
320: 	    if (event.key.keysym.sym == SDLK_q)
321: 	      quit = 1;
322:     }
323:   
324:   SDL_DestroyRenderer(renderer);
325:   SDL_DestroyWindow(window);
326:   SDL_Quit();
327:   
328:   return 0;
329: }
