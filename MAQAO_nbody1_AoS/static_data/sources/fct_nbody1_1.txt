/usr/include/x86_64-linux-gnu/bits/stdio2.h: 107 - 107
--------------------------------------------------------------------------------

107:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
/home/katia/Test-maqao/nbody1.c: 41 - 232
--------------------------------------------------------------------------------

41:   __asm__ volatile ("rdtsc" : "=a" (a), "=d" (d));
42:   
43:   return (d << 32) | a;
[...]
64:   vector c = { a.x + b.x, a.y + b.y };
[...]
72:   vector c = { b * a.x, b * a.y };
[...]
122:   for (int i = 0; i < nbodies - 1; i++)
123:     for (int j = i + 1; j < nbodies; j++)
124:       if (positions[i].x == positions[j].x &&
125: 	  positions[i].y == positions[j].y)
126: 	{
127: 	  vector temp = velocities[i];
128: 	  velocities[i] = velocities[j];
129: 	  velocities[j] = temp;
[...]
152:   for (int i = 0; i < nbodies; i++)
153:     velocities[i] = add_vectors(velocities[i], accelerations[i]);
[...]
159:   for (int i = 0; i < nbodies; i++)
160:     positions[i] = add_vectors(positions[i], add_vectors(velocities[i], scale_vector(0.5, accelerations[i])));
[...]
166:   compute_accelerations();
[...]
174: {
[...]
182:   srand(time(NULL));
183:   
184:   //
185:   SDL_Init(SDL_INIT_VIDEO);
186:   SDL_CreateWindowAndRenderer(800, 800, SDL_WINDOW_OPENGL, &window, &renderer);
187:   
188:   //
189:   init_system();
190:   
191:   //Main loop
192:   for (int i = 0; !quit && i < timeSteps; i++)
193:     {	  
194:       //
195:       double before = (double)rdtsc();
196:       
197:       simulate();
198: 
199:       //
200:       double after = (double)rdtsc();
201:       
202:       //
203:       printf("%d %lf\n", i, (after - before));
204:       
205:       SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
206:       SDL_RenderClear(renderer);
207:       
208:       for (int i = 0; i < nbodies; i++)
209: 	{
210: 	  SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
211: 	  SDL_RenderDrawPoint(renderer, positions[i].x, positions[i].y);
212: 	}
213:       
214:       SDL_RenderPresent(renderer);
215:       
216:       SDL_Delay(10);
217:       
218:       while (SDL_PollEvent(&event))
219: 	if (event.type == SDL_QUIT)
220: 	  quit = 1;
221: 	else
222: 	  if (event.type == SDL_KEYDOWN)
223: 	    if (event.key.keysym.sym == SDLK_q)
224: 	      quit = 1;
225:     }
226:   
227:   SDL_DestroyRenderer(renderer);
228:   SDL_DestroyWindow(window);
229:   SDL_Quit();
230:   
231:   return 0;
232: }
